<!DOCTYPE html>
<html lang="en" data-react-helmet="lang"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta charset="utf-8"><meta http-equiv="x-ua-compatible" content="ie=edge"><meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"><style id="typography.js">html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,summary{display:block}audio,canvas,progress,video{display:inline-block}audio:not([controls]){display:none;height:0}progress{vertical-align:baseline}[hidden],template{display:none}a{background-color:transparent;}a:active,a:hover{outline-width:0}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:inherit;font-weight:bolder}dfn{font-style:italic}h1{font-size:2em;margin:.67em 0}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}svg:not(:root){overflow:hidden}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}figure{margin:1em 40px}hr{box-sizing:content-box;height:0;overflow:visible}button,input,optgroup,select,textarea{font:inherit;margin:0}optgroup{font-weight:700}button,input{overflow:visible}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-input-placeholder{color:inherit;opacity:.54}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}html{font:100%/1.75 'Merriweather','Georgia',serif;box-sizing:border-box;overflow-y:scroll;}*{box-sizing:inherit;}*:before{box-sizing:inherit;}*:after{box-sizing:inherit;}body{color:hsla(0,0%,0%,0.9);font-family:'Merriweather','Georgia',serif;font-weight:400;word-wrap:break-word;font-kerning:normal;-moz-font-feature-settings:"kern", "liga", "clig", "calt";-ms-font-feature-settings:"kern", "liga", "clig", "calt";-webkit-font-feature-settings:"kern", "liga", "clig", "calt";font-feature-settings:"kern", "liga", "clig", "calt";}img{max-width:100%;margin-left:0;margin-right:0;margin-top:0;padding-bottom:0;padding-left:0;padding-right:0;padding-top:0;margin-bottom:1.75rem;}h1{margin-left:0;margin-right:0;margin-top:0;padding-bottom:0;padding-left:0;padding-right:0;padding-top:0;margin-bottom:1.75rem;color:inherit;font-family:Montserrat,sans-serif;font-weight:900;text-rendering:optimizeLegibility;font-size:2.5rem;line-height:1.1;}h2{margin-left:0;margin-right:0;margin-top:0;padding-bottom:0;padding-left:0;padding-right:0;padding-top:0;margin-bottom:1.75rem;color:inherit;font-family:'Merriweather','Georgia',serif;font-weight:900;text-rendering:optimizeLegibility;font-size:1.73286rem;line-height:1.1;}h3{margin-left:0;margin-right:0;margin-top:0;padding-bottom:0;padding-left:0;padding-right:0;padding-top:0;margin-bottom:1.75rem;color:inherit;font-family:'Merriweather','Georgia',serif;font-weight:900;text-rendering:optimizeLegibility;font-size:1.4427rem;line-height:1.1;}h4{margin-left:0;margin-right:0;margin-top:0;padding-bottom:0;padding-left:0;padding-right:0;padding-top:0;margin-bottom:1.75rem;color:inherit;font-family:'Merriweather','Georgia',serif;font-weight:900;text-rendering:optimizeLegibility;font-size:1rem;line-height:1.1;letter-spacing:0.140625em;text-transform:uppercase;}h5{margin-left:0;margin-right:0;margin-top:0;padding-bottom:0;padding-left:0;padding-right:0;padding-top:0;margin-bottom:1.75rem;color:inherit;font-family:'Merriweather','Georgia',serif;font-weight:900;text-rendering:optimizeLegibility;font-size:0.83255rem;line-height:1.1;}h6{margin-left:0;margin-right:0;margin-top:0;padding-bottom:0;padding-left:0;padding-right:0;padding-top:0;margin-bottom:1.75rem;color:inherit;font-family:'Merriweather','Georgia',serif;font-weight:900;text-rendering:optimizeLegibility;font-size:0.75966rem;line-height:1.1;font-style:italic;}hgroup{margin-left:0;margin-right:0;margin-top:0;padding-bottom:0;padding-left:0;padding-right:0;padding-top:0;margin-bottom:1.75rem;}ul{margin-left:1.75rem;margin-right:0;margin-top:0;padding-bottom:0;padding-left:0;padding-right:0;padding-top:0;margin-bottom:1.75rem;list-style-position:outside;list-style-image:none;list-style:disc;}ol{margin-left:1.75rem;margin-right:0;margin-top:0;padding-bottom:0;padding-left:0;padding-right:0;padding-top:0;margin-bottom:1.75rem;list-style-position:outside;list-style-image:none;}dl{margin-left:0;margin-right:0;margin-top:0;padding-bottom:0;padding-left:0;padding-right:0;padding-top:0;margin-bottom:1.75rem;}dd{margin-left:0;margin-right:0;margin-top:0;padding-bottom:0;padding-left:0;padding-right:0;padding-top:0;margin-bottom:1.75rem;}p{margin-left:0;margin-right:0;margin-top:0;padding-bottom:0;padding-left:0;padding-right:0;padding-top:0;margin-bottom:1.75rem;}figure{margin-left:0;margin-right:0;margin-top:0;padding-bottom:0;padding-left:0;padding-right:0;padding-top:0;margin-bottom:1.75rem;}pre{margin-left:0;margin-right:0;margin-top:0;padding-bottom:0;padding-left:0;padding-right:0;padding-top:0;margin-bottom:1.75rem;font-size:0.85rem;line-height:1.75rem;}table{margin-left:0;margin-right:0;margin-top:0;padding-bottom:0;padding-left:0;padding-right:0;padding-top:0;margin-bottom:1.75rem;font-size:1rem;line-height:1.75rem;border-collapse:collapse;width:100%;}fieldset{margin-left:0;margin-right:0;margin-top:0;padding-bottom:0;padding-left:0;padding-right:0;padding-top:0;margin-bottom:1.75rem;}blockquote{margin-left:-1.75rem;margin-right:1.75rem;margin-top:0;padding-bottom:0;padding-left:1.42188rem;padding-right:0;padding-top:0;margin-bottom:1.75rem;font-size:1.20112rem;line-height:1.75rem;color:hsla(0,0%,0%,0.59);font-style:italic;border-left:0.32813rem solid hsla(0,0%,0%,0.9);}form{margin-left:0;margin-right:0;margin-top:0;padding-bottom:0;padding-left:0;padding-right:0;padding-top:0;margin-bottom:1.75rem;}noscript{margin-left:0;margin-right:0;margin-top:0;padding-bottom:0;padding-left:0;padding-right:0;padding-top:0;margin-bottom:1.75rem;}iframe{margin-left:0;margin-right:0;margin-top:0;padding-bottom:0;padding-left:0;padding-right:0;padding-top:0;margin-bottom:1.75rem;}hr{margin-left:0;margin-right:0;margin-top:0;padding-bottom:0;padding-left:0;padding-right:0;padding-top:0;margin-bottom:calc(1.75rem - 1px);background:hsla(0,0%,0%,0.2);border:none;height:1px;}address{margin-left:0;margin-right:0;margin-top:0;padding-bottom:0;padding-left:0;padding-right:0;padding-top:0;margin-bottom:1.75rem;}b{font-weight:700;}strong{font-weight:700;}dt{font-weight:700;}th{font-weight:700;}li{margin-bottom:calc(1.75rem / 2);}ol li{padding-left:0;}ul li{padding-left:0;}li > ol{margin-left:1.75rem;margin-bottom:calc(1.75rem / 2);margin-top:calc(1.75rem / 2);}li > ul{margin-left:1.75rem;margin-bottom:calc(1.75rem / 2);margin-top:calc(1.75rem / 2);}blockquote *:last-child{margin-bottom:0;}li *:last-child{margin-bottom:0;}p *:last-child{margin-bottom:0;}li > p{margin-bottom:calc(1.75rem / 2);}code{font-size:0.85rem;line-height:1.75rem;}kbd{font-size:0.85rem;line-height:1.75rem;}samp{font-size:0.85rem;line-height:1.75rem;}abbr{border-bottom:1px dotted hsla(0,0%,0%,0.5);cursor:help;}acronym{border-bottom:1px dotted hsla(0,0%,0%,0.5);cursor:help;}abbr[title]{border-bottom:1px dotted hsla(0,0%,0%,0.5);cursor:help;text-decoration:none;}thead{text-align:left;}td,th{text-align:left;border-bottom:1px solid hsla(0,0%,0%,0.12);font-feature-settings:"tnum";-moz-font-feature-settings:"tnum";-ms-font-feature-settings:"tnum";-webkit-font-feature-settings:"tnum";padding-left:1.16667rem;padding-right:1.16667rem;padding-top:0.875rem;padding-bottom:calc(0.875rem - 1px);}th:first-child,td:first-child{padding-left:0;}th:last-child,td:last-child{padding-right:0;}blockquote > :last-child{margin-bottom:0;}blockquote cite{font-size:1rem;line-height:1.75rem;color:hsla(0,0%,0%,0.9);font-weight:400;}blockquote cite:before{content:"— ";}ul,ol{margin-left:0;}@media only screen and (max-width:480px){ul,ol{margin-left:1.75rem;}blockquote{margin-left:-1.3125rem;margin-right:0;padding-left:0.98438rem;}}h1,h2,h3,h4,h5,h6{margin-top:3.5rem;}a{box-shadow:0 1px 0 0 currentColor;color:#007acc;text-decoration:none;}a:hover,a:active{box-shadow:none;}mark,ins{background:#007acc;color:white;padding:0.10938rem 0.21875rem;text-decoration:none;}a.gatsby-resp-image-link{box-shadow:none;}</style><meta name="generator" content="Gatsby 4.25.7"><meta name="theme-color" content="#663399"><meta data-react-helmet="true" name="viewport" content="width=device-width, initial-scale=1.0"><meta data-react-helmet="true" property="og:image" content="https://alexkondov.com/static/b6eddd8c6ec0677ad78e762842b40ad2/bc8e0/cover.png"><meta data-react-helmet="true" property="og:url" content="https://alexkondov.com/full-stack-tao-clean-architecture-react/"><meta data-react-helmet="true" property="og:locale" content="en_US"><meta data-react-helmet="true" name="description" content="The more information we have up front when we’re building a software product, the better it will come out. But I’ve only heard legends about the days when…"><meta data-react-helmet="true" property="og:title" content="Clean Architecture in React"><meta data-react-helmet="true" property="og:description" content="The more information we have up front when we’re building a software product, the better it will come out. But I’ve only heard legends about the days when…"><meta data-react-helmet="true" property="og:type" content="website"><meta data-react-helmet="true" name="twitter:card" content="summary_large_image"><meta data-react-helmet="true" name="twitter:creator" content="Alex Kondov"><meta data-react-helmet="true" name="twitter:title" content="Clean Architecture in React"><meta data-react-helmet="true" name="twitter:description" content="The more information we have up front when we’re building a software product, the better it will come out. But I’ve only heard legends about the days when…"><style data-href="/styles.0a4851d5f750477d8e5e.css" data-identity="gatsby-global-css">@font-face{font-display:swap;font-family:Montserrat;font-style:normal;font-weight:100;src:local("Montserrat Thin "),local("Montserrat-Thin"),url(/static/montserrat-latin-100-8d7d79679b70dbe27172b6460e7a7910.woff2) format("woff2"),url(/static/montserrat-latin-100-ec38980a9e0119a379e2a9b3dbb1901a.woff) format("woff")}@font-face{font-display:swap;font-family:Montserrat;font-style:italic;font-weight:100;src:local("Montserrat Thin italic"),local("Montserrat-Thinitalic"),url(/static/montserrat-latin-100italic-e279051046ba1286706adc886cf1c96b.woff2) format("woff2"),url(/static/montserrat-latin-100italic-3b325a3173c8207435cd1b76e19bf501.woff) format("woff")}@font-face{font-display:swap;font-family:Montserrat;font-style:normal;font-weight:200;src:local("Montserrat Extra Light "),local("Montserrat-Extra Light"),url(/static/montserrat-latin-200-9d266fbbfa6cab7009bd56003b1eeb67.woff2) format("woff2"),url(/static/montserrat-latin-200-2d8ba08717110d27122e54c34b8a5798.woff) format("woff")}@font-face{font-display:swap;font-family:Montserrat;font-style:italic;font-weight:200;src:local("Montserrat Extra Light italic"),local("Montserrat-Extra Lightitalic"),url(/static/montserrat-latin-200italic-6e5b3756583bb2263eb062eae992735e.woff2) format("woff2"),url(/static/montserrat-latin-200italic-a0d6f343e4b536c582926255367a57da.woff) format("woff")}@font-face{font-display:swap;font-family:Montserrat;font-style:normal;font-weight:300;src:local("Montserrat Light "),local("Montserrat-Light"),url(/static/montserrat-latin-300-00b3e893aab5a8fd632d6342eb72551a.woff2) format("woff2"),url(/static/montserrat-latin-300-ea303695ceab35f17e7d062f30e0173b.woff) format("woff")}@font-face{font-display:swap;font-family:Montserrat;font-style:italic;font-weight:300;src:local("Montserrat Light italic"),local("Montserrat-Lightitalic"),url(/static/montserrat-latin-300italic-56f34ea368f6aedf89583d444bbcb227.woff2) format("woff2"),url(/static/montserrat-latin-300italic-54b0bf2c8c4c12ffafd803be2466a790.woff) format("woff")}@font-face{font-display:swap;font-family:Montserrat;font-style:normal;font-weight:400;src:local("Montserrat Regular "),local("Montserrat-Regular"),url(/static/montserrat-latin-400-b71748ae4f80ec8c014def4c5fa8688b.woff2) format("woff2"),url(/static/montserrat-latin-400-0659a9f4e90db5cf51b50d005bff1e41.woff) format("woff")}@font-face{font-display:swap;font-family:Montserrat;font-style:italic;font-weight:400;src:local("Montserrat Regular italic"),local("Montserrat-Regularitalic"),url(/static/montserrat-latin-400italic-6eed6b4cbb809c6efc7aa7ddad6dbe3e.woff2) format("woff2"),url(/static/montserrat-latin-400italic-7583622cfde30ae49086d18447ab28e7.woff) format("woff")}@font-face{font-display:swap;font-family:Montserrat;font-style:normal;font-weight:500;src:local("Montserrat Medium "),local("Montserrat-Medium"),url(/static/montserrat-latin-500-091b209546e16313fd4f4fc36090c757.woff2) format("woff2"),url(/static/montserrat-latin-500-edd311588712a96bbf435fad264fff62.woff) format("woff")}@font-face{font-display:swap;font-family:Montserrat;font-style:italic;font-weight:500;src:local("Montserrat Medium italic"),local("Montserrat-Mediumitalic"),url(/static/montserrat-latin-500italic-c90ced68b46050061d1a41842d6dfb43.woff2) format("woff2"),url(/static/montserrat-latin-500italic-5146cbfe02b1deea5dffea27a5f2f998.woff) format("woff")}@font-face{font-display:swap;font-family:Montserrat;font-style:normal;font-weight:600;src:local("Montserrat SemiBold "),local("Montserrat-SemiBold"),url(/static/montserrat-latin-600-0480d2f8a71f38db8633b84d8722e0c2.woff2) format("woff2"),url(/static/montserrat-latin-600-b77863a375260a05dd13f86a1cee598f.woff) format("woff")}@font-face{font-display:swap;font-family:Montserrat;font-style:italic;font-weight:600;src:local("Montserrat SemiBold italic"),local("Montserrat-SemiBolditalic"),url(/static/montserrat-latin-600italic-cf46ffb11f3a60d7df0567f8851a1d00.woff2) format("woff2"),url(/static/montserrat-latin-600italic-c4fcfeeb057724724097167e57bd7801.woff) format("woff")}@font-face{font-display:swap;font-family:Montserrat;font-style:normal;font-weight:700;src:local("Montserrat Bold "),local("Montserrat-Bold"),url(/static/montserrat-latin-700-7dbcc8a5ea2289d83f657c25b4be6193.woff2) format("woff2"),url(/static/montserrat-latin-700-99271a835e1cae8c76ef8bba99a8cc4e.woff) format("woff")}@font-face{font-display:swap;font-family:Montserrat;font-style:italic;font-weight:700;src:local("Montserrat Bold italic"),local("Montserrat-Bolditalic"),url(/static/montserrat-latin-700italic-c41ad6bdb4bd504a843d546d0a47958d.woff2) format("woff2"),url(/static/montserrat-latin-700italic-6779372f04095051c62ed36bc1dcc142.woff) format("woff")}@font-face{font-display:swap;font-family:Montserrat;font-style:normal;font-weight:800;src:local("Montserrat ExtraBold "),local("Montserrat-ExtraBold"),url(/static/montserrat-latin-800-db9a3e0ba7eaea32e5f55328ace6cf23.woff2) format("woff2"),url(/static/montserrat-latin-800-4e3c615967a2360f5db87d2f0fd2456f.woff) format("woff")}@font-face{font-display:swap;font-family:Montserrat;font-style:italic;font-weight:800;src:local("Montserrat ExtraBold italic"),local("Montserrat-ExtraBolditalic"),url(/static/montserrat-latin-800italic-bf45bfa14805969eda318973947bc42b.woff2) format("woff2"),url(/static/montserrat-latin-800italic-fe82abb0bcede51bf724254878e0c374.woff) format("woff")}@font-face{font-display:swap;font-family:Montserrat;font-style:normal;font-weight:900;src:local("Montserrat Black "),local("Montserrat-Black"),url(/static/montserrat-latin-900-e66c7edc609e24bacbb705175669d814.woff2) format("woff2"),url(/static/montserrat-latin-900-8211f418baeb8ec880b80ba3c682f957.woff) format("woff")}@font-face{font-display:swap;font-family:Montserrat;font-style:italic;font-weight:900;src:local("Montserrat Black italic"),local("Montserrat-Blackitalic"),url(/static/montserrat-latin-900italic-4454c775e48152c1a72510ceed3603e2.woff2) format("woff2"),url(/static/montserrat-latin-900italic-efcaa0f6a82ee0640b83a0916e6e8d68.woff) format("woff")}@font-face{font-display:swap;font-family:Merriweather;font-style:normal;font-weight:300;src:local("Merriweather Light "),local("Merriweather-Light"),url(/static/merriweather-latin-300-fc117160c69a8ea0851b26dd14748ee4.woff2) format("woff2"),url(/static/merriweather-latin-300-58b18067ebbd21fda77b67e73c241d3b.woff) format("woff")}@font-face{font-display:swap;font-family:Merriweather;font-style:italic;font-weight:300;src:local("Merriweather Light italic"),local("Merriweather-Lightitalic"),url(/static/merriweather-latin-300italic-fe29961474f8dbf77c0aa7b9a629e4bc.woff2) format("woff2"),url(/static/merriweather-latin-300italic-23c3f1f88683618a4fb8d265d33d383a.woff) format("woff")}@font-face{font-display:swap;font-family:Merriweather;font-style:normal;font-weight:400;src:local("Merriweather Regular "),local("Merriweather-Regular"),url(/static/merriweather-latin-400-d9479e8023bef9cbd9bf8d6eabd6bf36.woff2) format("woff2"),url(/static/merriweather-latin-400-040426f99ff6e00b86506452e0d1f10b.woff) format("woff")}@font-face{font-display:swap;font-family:Merriweather;font-style:italic;font-weight:400;src:local("Merriweather Regular italic"),local("Merriweather-Regularitalic"),url(/static/merriweather-latin-400italic-2de7bfeaf08fb03d4315d49947f062f7.woff2) format("woff2"),url(/static/merriweather-latin-400italic-79db67aca65f5285964ab332bd65f451.woff) format("woff")}@font-face{font-display:swap;font-family:Merriweather;font-style:normal;font-weight:700;src:local("Merriweather Bold "),local("Merriweather-Bold"),url(/static/merriweather-latin-700-4b08e01d805fa35d7bf777f1b24314ae.woff2) format("woff2"),url(/static/merriweather-latin-700-22fb8afba4ab1f093b6ef9e28a9b6e92.woff) format("woff")}@font-face{font-display:swap;font-family:Merriweather;font-style:italic;font-weight:700;src:local("Merriweather Bold italic"),local("Merriweather-Bolditalic"),url(/static/merriweather-latin-700italic-cd92541b177652fffb6e3b952f1c33f1.woff2) format("woff2"),url(/static/merriweather-latin-700italic-f87f3d87cea0dd0979bfc8ac9ea90243.woff) format("woff")}@font-face{font-display:swap;font-family:Merriweather;font-style:normal;font-weight:900;src:local("Merriweather Black "),local("Merriweather-Black"),url(/static/merriweather-latin-900-f813fc6a4bee46eda5224ac7ebf1b7be.woff2) format("woff2"),url(/static/merriweather-latin-900-5d4e42cb44410674acd99153d57df032.woff) format("woff")}@font-face{font-display:swap;font-family:Merriweather;font-style:italic;font-weight:900;src:local("Merriweather Black italic"),local("Merriweather-Blackitalic"),url(/static/merriweather-latin-900italic-b7901d85486871c1779c0e93ddd85656.woff2) format("woff2"),url(/static/merriweather-latin-900italic-9647f9fdab98756989a8a5550eb205c3.woff) format("woff")}code[class*=language-],pre[class*=language-]{color:#5c6e74;direction:ltr;font-family:Consolas,Monaco,Andale Mono,Ubuntu Mono,monospace;font-size:13px;-webkit-hyphens:none;hyphens:none;line-height:1.5;-o-tab-size:4;tab-size:4;text-align:left;text-shadow:none;white-space:pre;word-break:normal;word-spacing:normal}code[class*=language-]::mozselection,code[class*=language-]::selection,pre[class*=language-]::mozselection,pre[class*=language-]::selection{background:#b3d4fc;text-shadow:none}@media print{code[class*=language-],pre[class*=language-]{text-shadow:none}}pre[class*=language-]{background:#f9f9f9;margin:.5em 0;overflow:auto;padding:1em}:not(pre)>code[class*=language-]{background:#f9f2f4;border-radius:.3em;color:#db4c69;padding:.1em .3em}.namespace{opacity:.7}.token.cdata,.token.comment,.token.doctype,.token.prolog{color:#93a1a1}.token.punctuation{color:#999}.token.boolean,.token.constant,.token.deleted,.token.number,.token.property,.token.symbol,.token.tag{color:#905}.token.attr-name,.token.builtin,.token.char,.token.inserted,.token.selector,.token.string{color:#690}.language-css .token.string,.style .token.string,.token.entity,.token.operator,.token.url{color:#a67f59}.token.atrule,.token.attr-value,.token.keyword{color:#07a}.token.function{color:#dd4a68}.token.important,.token.regex,.token.variable{color:#e90}.token.bold,.token.important{font-weight:700}.token.italic{font-style:italic}.token.entity{cursor:help}pre[data-line]{position:relative}pre[class*=language-]>code[class*=language-]{position:relative;z-index:1}.line-highlight{background:#f7ebc6;box-shadow:inset 5px 0 0 #f7d87c;left:0;line-height:inherit;margin-top:1em;padding-bottom:inherit;padding-left:0;padding-right:0;padding-top:inherit;pointer-events:none;position:absolute;right:0;white-space:pre;z-index:0}:root{--accent:grey}html{height:100%}#___gatsby,body{min-height:100vh}a{color:inherit}a,a:hover{box-shadow:inset 0 -.05em 0 #000}.content h2:before,.content h3:before{background:var(--accent);content:"";display:block;height:2px;margin-bottom:20px;width:60px}.content h2:hover .header-link,.content h3:hover .header-link{display:inline-block}.content li{margin-bottom:0}.content ul p{margin-top:10px}h3 a{text-decoration:none!important}.newsletter-form-input{grid-gap:5px;display:grid;grid-template-columns:1fr .25fr}.newsletter-form-input input[type=email]{background:#333;border:0;border-bottom-left-radius:3px;border-top-left-radius:3px;color:#fff;padding:5px 10px}.newsletter-form-input input[type=submit]{background-color:#fff;border:0;border-bottom-right-radius:3px;border-top-right-radius:3px;color:#222;cursor:pointer}.bio-links{align-items:center;display:flex;flex-direction:row;justify-content:center;margin:3rem 0}.bio-links a,.bio-links>div:first-of-type{margin-right:18px}.bio-links a{box-shadow:none;height:18px;width:18px}.bio-links a path{fill:rgba(22,20,31,.6)}.bio-links a:hover path{transition:all .15s ease-in}.bio-links a#linkedin:hover path{fill:#2e78b0}.bio-links a#instagram:hover path{fill:#dd2a7b}.bio-links a#x:hover path{fill:#000}.bio-links a#youtube:hover path{fill:red}.bio-links a#medium:hover path{fill:#57ab88}.bio-links a#github:hover path{fill:#000}.main-nav ul{display:flex;flex-direction:row;justify-content:center;list-style-type:none;margin-bottom:3rem}.main-nav ul li{margin-right:20px}.main-nav ul li a{box-shadow:none}.main-nav ul li a.active,.main-nav ul li a:hover{box-shadow:inset 0 -.05em 0 #000}@media only screen and (max-width:600px){.newsletter-form-input{grid-gap:10px;grid-template-columns:1fr}.gatsby-highlight{margin:0 -1.3125rem}pre[class*=language-]{border-radius:0;padding:1em 1.6em}}pre{word-wrap:normal;overflow:auto;white-space:pre}pre[class*=language-]{border-radius:5px;margin-bottom:1.75rem}.post-subtitle:after{background:var(--accent);content:"";display:block;height:2px;margin-top:20px;width:60px}.post-title{font-family:Merriweather,serif;font-size:3rem}.post-image{height:400px;-o-object-fit:cover;object-fit:cover;width:100%}@media only screen and (max-width:768px){.post-title{font-size:2rem}.post-image{height:200px}}.newsletter-form{background:#222;border-radius:5px;color:#fff;margin:3.5rem 0 4.5rem;padding:20px}.newsletter-form h3{text-align:center}.newsletter-form svg{display:block;height:150px;margin:0 auto 10px;width:150px}.section-title{font-weight:500;font-weight:700;margin:6rem 0 4rem;text-align:center}.section-title:after{background:var(--accent);content:"";display:block;height:2px;margin-left:auto;margin-right:auto;margin-top:10px;width:60px}.article-list-item{border:1px solid #000;border-radius:5px;margin-bottom:20px;padding:20px;transition:all .2s ease}.article-list-item:hover{box-shadow:0 8px 30px rgba(0,0,0,.12);box-shadow:6px 6px 0 0 #000;transform:translate(-6px,-6px)}.article-list-item p{margin-bottom:0}.article-list-item .divider{background-color:var(--accent);height:2px;margin-bottom:20px;margin-top:10px;width:40px}.article-list-title{font-size:1.25rem;font-weight:500;margin-bottom:0;margin-top:0}.meta-separator{margin:0 5px}.header-link{color:#d9d9d9;cursor:pointer;display:none}.header-link,.header-link:hover{box-shadow:none}.book{align-items:center;border:1px solid #000;border-radius:5px;display:flex;flex-direction:column;margin-top:120px;padding:28px;text-align:center;transition:all .2s ease}.book h2{margin-bottom:20px}.book:hover{box-shadow:0 8px 30px rgba(0,0,0,.12);box-shadow:6px 6px 0 0 #000;transform:translate(-6px,-6px)}.book:hover img{transform:rotate(0deg)}.book:hover a{box-shadow:inset 0 -.5em 0 var(--accent)}.book img{box-shadow:0 0 0 0 transparent,0 0 0 0 transparent,0 4px 6px -1px rgba(0,0,0,.1),0 2px 4px -1px rgba(0,0,0,.06);margin-top:-90px;transform:rotate(-5deg);transition:transform .2s ease;width:180px}.book .divider{background-color:var(--accent);height:2px;margin:10px auto 20px;width:40px}@media only screen and (max-width:600px){.book{align-items:center;flex-direction:column}}.story-intro{font-style:italic}.story-chapter-heading{font-size:2rem;font-weight:700;margin-bottom:3rem;margin-top:3rem;text-align:center}.chapter-link,a.anchor.before{box-shadow:none}.chapter-link:hover{box-shadow:inset 0 -.05em 0 #000}.consulting-section:after{background:var(--accent);content:"";display:block;height:2px;margin-top:20px;width:60px}.consulting-button{background:#000;border:0;color:#fff;display:block;margin-top:30px;padding:10px;text-align:center;width:100%}</style><style type="text/css">
    .anchor.before {
      position: absolute;
      top: 0;
      left: 0;
      transform: translateX(-100%);
      padding-right: 4px;
    }
    .anchor.after {
      display: inline-block;
      padding-left: 4px;
    }
    h1 .anchor svg,
    h2 .anchor svg,
    h3 .anchor svg,
    h4 .anchor svg,
    h5 .anchor svg,
    h6 .anchor svg {
      visibility: hidden;
    }
    h1:hover .anchor svg,
    h2:hover .anchor svg,
    h3:hover .anchor svg,
    h4:hover .anchor svg,
    h5:hover .anchor svg,
    h6:hover .anchor svg,
    h1 .anchor:focus svg,
    h2 .anchor:focus svg,
    h3 .anchor:focus svg,
    h4 .anchor:focus svg,
    h5 .anchor:focus svg,
    h6 .anchor:focus svg {
      visibility: visible;
    }
  </style><script type="text/javascript" async="" src="Clean%20Architecture%20in%20React%20_%20Alex%20Kondov%20-%20Software%20Engineer_files/js"></script><script async="" src="Clean%20Architecture%20in%20React%20_%20Alex%20Kondov%20-%20Software%20Engineer_files/analytics.js"></script><script>
    document.addEventListener("DOMContentLoaded", function(event) {
      var hash = window.decodeURI(location.hash.replace('#', ''))
      if (hash !== '') {
        var element = document.getElementById(hash)
        if (element) {
          var scrollTop = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop
          var clientTop = document.documentElement.clientTop || document.body.clientTop || 0
          var offset = element.getBoundingClientRect().top + scrollTop - clientTop
          // Wait for the browser to finish rendering before scrolling.
          setTimeout((function() {
            window.scrollTo(0, offset - 0)
          }), 0)
        }
      }
    })
  </script><link rel="preconnect" href="https://www.google-analytics.com/"><link rel="dns-prefetch" href="https://www.google-analytics.com/"><link rel="icon" href="https://alexkondov.com/favicon-32x32.png?v=85413a768f19b3c355d406a68a1caf23" type="image/png"><link rel="manifest" href="https://alexkondov.com/manifest.webmanifest" crossorigin="anonymous"><link rel="apple-touch-icon" sizes="48x48" href="https://alexkondov.com/icons/icon-48x48.png?v=85413a768f19b3c355d406a68a1caf23"><link rel="apple-touch-icon" sizes="72x72" href="https://alexkondov.com/icons/icon-72x72.png?v=85413a768f19b3c355d406a68a1caf23"><link rel="apple-touch-icon" sizes="96x96" href="https://alexkondov.com/icons/icon-96x96.png?v=85413a768f19b3c355d406a68a1caf23"><link rel="apple-touch-icon" sizes="144x144" href="https://alexkondov.com/icons/icon-144x144.png?v=85413a768f19b3c355d406a68a1caf23"><link rel="apple-touch-icon" sizes="192x192" href="https://alexkondov.com/icons/icon-192x192.png?v=85413a768f19b3c355d406a68a1caf23"><link rel="apple-touch-icon" sizes="256x256" href="https://alexkondov.com/icons/icon-256x256.png?v=85413a768f19b3c355d406a68a1caf23"><link rel="apple-touch-icon" sizes="384x384" href="https://alexkondov.com/icons/icon-384x384.png?v=85413a768f19b3c355d406a68a1caf23"><link rel="apple-touch-icon" sizes="512x512" href="https://alexkondov.com/icons/icon-512x512.png?v=85413a768f19b3c355d406a68a1caf23"><title>Clean Architecture in React | Alex Kondov - Software Engineer</title><link data-react-helmet="true" rel="canonical" href="https://alexkondov.com/full-stack-tao-clean-architecture-react/"><script async="true" src="Clean%20Architecture%20in%20React%20_%20Alex%20Kondov%20-%20Software%20Engineer_files/widgets.js" charset="utf-8" data-react-helmet="true"></script><link rel="prefetch" href="https://alexkondov.com/page-data/index/page-data.json" crossorigin="anonymous" as="fetch"><link rel="prefetch" href="https://alexkondov.com/page-data/articles/page-data.json" crossorigin="anonymous" as="fetch"><link rel="prefetch" href="https://alexkondov.com/page-data/consulting/page-data.json" crossorigin="anonymous" as="fetch"><link rel="prefetch" href="https://alexkondov.com/page-data/books/page-data.json" crossorigin="anonymous" as="fetch"><link rel="prefetch" href="https://alexkondov.com/component---src-pages-books-js-8e20f1a3a5356ca57cb1.js"></head><body><div id="___gatsby"><div style="outline:none" tabindex="-1" id="gatsby-focus-wrapper"><div style="margin-left:auto;margin-right:auto;max-width:42rem;padding:2.625rem 1.3125rem;min-height:100%"><nav class="main-nav"><ul><li><a href="https://alexkondov.com/">Home</a></li><li><a href="https://alexkondov.com/articles">Articles</a></li><li><a href="https://alexkondov.com/consulting">Consulting</a></li><li><a href="https://alexkondov.com/books">Books</a></li><li><a href="https://alexkondov.com/fiction">Fiction</a></li></ul></nav><h1 class="post-title" style="margin-top:0">Clean Architecture in React</h1><p class="post-subtitle" style="font-size:0.83255rem;line-height:1.75rem;display:block;margin-bottom:1.75rem;margin-top:-1.75rem">32<!-- --> minute read</p><div class="content"><p>The
 more information we have up front when we’re building a software 
product, the better it will come out. But I’ve only heard legends about 
the days when engineers got a detailed document describing a project in 
detail without any follow-up changes.</p>
<p>Structuring your code properly is not as easy when the ground is shifting under your feet.</p>
<p>Modern applications are never set in stone. They start, small and 
simple, then slowly grow into a complex system with more and more 
features that rarely fit into our initial model. During that evolution 
we pile up small design mistakes and tech debt, eroding the state of the
 project.</p>
<p>That’s why I won’t show you how to build an app that’s frozen in time.</p>
<p>We’ll start small and build a very simple feature, imagining that a 
startup wants to validate an idea. Then, in the next few chapters, we’ll
 add more and more functionality to the product, expanding it and 
dealing with the curve balls that real life throws at us.</p>
<p>Building this functionality won’t be a challenge to any developer 
who’s had a little bit of experience, but structuring it correctly is a 
tall order even for experienced engineers. We need to know when to focus
 on design and when to intentionally avoid it.</p>
<p>We’ll establish the fundamental code-level principles we’ll follow to
 build our application. We’ll see how they will support us when we start
 changing things in future articles, then we’ll expand to project-level 
principles and even patterns used to build complex systems.</p>
<p>But one thing at a time.</p>
<h2 id="a-quick-aside" style="position:relative;"><a href="#a-quick-aside" aria-label="a quick aside permalink" class="anchor before"><svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>A Quick Aside</h2>
<p>This is not just an article full of code examples, it’s a chapter of 
my upcoming book “The Full-Stack Tao” which I’m writing in public.</p>
<p>Here are all published chapters so far:</p>
<ul>
<li><a href="https://alexkondov.com/full-stack-tao-start-with-the-domain/">1. Start with the Domain</a></li>
<li><a href="https://alexkondov.com/full-stack-tao-picking-tech-stack/">2. Picking a Tech Stack</a></li>
<li><a href="https://alexkondov.com/full-stack-tao-setting-up-the-project/">3. Setting Up the Project</a></li>
<li><a href="https://alexkondov.com/full-stack-tao-clean-architecture-react/">4. Clean Architecture in React</a></li>
<li><a href="https://alexkondov.com/full-stack-tao-proper-rest-api/">5. Building a Proper REST API</a></li>
<li><a href="https://alexkondov.com/full-stack-tao-styling/">6. How to Style a React Application</a></li>
</ul>
<h2 id="the-requirements" style="position:relative;"><a href="#the-requirements" aria-label="the requirements permalink" class="anchor before"><svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The Requirements</h2>
<p>We have the following requirements:</p>
<p><strong>“We need to build a page that allows users to read the 
currently active prompt in a writing app, and then answer it. They 
should be able to see other users’ answers, but only after they submit 
their own. Before they do, they should only see the prompt and the input
 field to submit their response.”</strong></p>
<p>Simple enough, right?</p>
<p>We can put our headphones on and get to building. But if we do that 
without asking questions, we’ll hit all the unknown unknowns when we’ve 
already made some assumptions about the application.</p>
<p>How will we access the data? Since we have authenticated users, then 
what should anonymous users see? How will we authenticate users? How 
important is SEO? Will there be a mechanism for users to edit or delete 
their responses after submission? Will there be any animations on the 
page? Where will we host the images that we will show?</p>
<h2 id="dont-build-on-assumptions" style="position:relative;"><a href="#dont-build-on-assumptions" aria-label="dont build on assumptions permalink" class="anchor before"><svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Don’t Build on Assumptions</h2>
<p>Assumptions are the root cause for many engineering problems and we 
want to make as few of them as possible. We can never do completely 
without them because we don’t operate with perfect information about the
 future, but the more questions we ask the fewer of them remain.</p>
<p>Sometimes the people sitting on the business side will have an 
answer, sometimes they won’t. But by drilling down, we reduce the chance
 of critical design mistakes.</p>
<p>By asking questions again and again, we shift from a paradigm of ‘best-guess’ engineering to one of informed decision-making.</p>
<h2 id="a-first-draft" style="position:relative;"><a href="#a-first-draft" aria-label="a first draft permalink" class="anchor before"><svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>A First Draft</h2>
<p>Once we get a better understanding of the product, it’s important to 
get something on the screen as soon as possible. Regardless if you’re 
working in a startup or a big corp, we need to get the application to 
work before we start thinking of any improvements, patterns, and 
structure.</p>
<p>Think about it as the first draft of a text. We don’t sweat the 
grammar, the commas, and the repetitive words. We just want to get it 
working.</p>
<p>In the context of React, this would mean creating a component, 
putting all the functionality inside of it, and making sure it matches 
our expectations.</p>
<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Home</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">About</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/contact<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Contact</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre></div>
<p>I’ve intentionally omitted the styling details here because we’ll focus on them in a follow-up chapter.</p>
<p>We get to the point where we need to decide what to render on the 
page. Our decision will be based on whether the user has answered the 
current prompt, and we have multiple ways to retrieve that info.</p>
<p>Since we don’t have auth implemented now and we’re just prototyping the UI we need to think in the realm of the abstract here.</p>
<h2 id="discussing-data-retrieval" style="position:relative;"><a href="#discussing-data-retrieval" aria-label="discussing data retrieval permalink" class="anchor before"><svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Discussing Data Retrieval</h2>
<p>We could make one request to retrieve the prompt and answers for the 
page, and another to check if the user has answered. Filtering through 
the answers in the browser is out of the question - a pagination 
mechanism is likely to be used for such content. We shouldn’t overfetch 
data we won’t show on the screen and it wouldn’t be secure to have data 
in the browser we wouldn’t want the user to see.</p>
<p>Since we can’t derive that information from the response 
consistently, and we’d need it together with the rest of the data, our 
only option would be to have the server do it for us.</p>
<p>Another way the API could give us this information would be to send <code class="language-text">null</code> as the value of the <code class="language-text">answers</code>
 property, signaling that we shouldn’t show them. But we don’t want to 
communicate with types and rely on convention. It would mean a lot of 
additional checks for a nullable type in the front-end, and it would 
also have to be documented on the back-end.</p>
<p>In other words, by using <code class="language-text">null</code> for 
communication we risk putting ourselves into a Chesterton’s Fence 
situation. Someone may change it to an empty array in the future, not 
knowing that we rely on the empty type and we’d end up with a broken 
product.</p>
<p>We’d be using <code class="language-text">null</code> as a flag, and we can do better by having the API just send a boolean flag instead as a separate property called <code class="language-text">answered</code>. While prototyping and waiting for the server to make the data available, we could work with the following structure.</p>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">const</span> prompt <span class="token operator">=</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token string">'What is the meaning of life?'</span><span class="token punctuation">,</span>
  answers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  answered<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span></code></pre></div>
<p>Then we can have a check in the component based on that flag.</p>
<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token comment">// ...</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>prompt<span class="token punctuation">.</span>answered <span class="token operator">?</span> <span class="token punctuation">(</span>
        prompt<span class="token punctuation">.</span>answers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">...</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Submit</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">//...</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre></div>
<p>Next, we need to think of the structure for the answers.</p>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">const</span> prompt <span class="token operator">=</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token string">'What is the meaning of life?'</span><span class="token punctuation">,</span>
  answers<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      text<span class="token operator">:</span> <span class="token string">'42'</span><span class="token punctuation">,</span>
      author<span class="token operator">:</span> <span class="token punctuation">{</span>
        name<span class="token operator">:</span> <span class="token string">'John Doe'</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
  answered<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span></code></pre></div>
<p>The only important detail here is how would the author’s info be 
passed together with the answer. This has to be communicated with the 
team/person implementing the back-end, just like we thought about the 
boolean <code class="language-text">answered</code> flag above.</p>
<p>In this case, I’d rather have a nested property for the author 
instead of keeping their data at the same level as the rest of the 
answer data.</p>
<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token comment">// ...</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>prompt<span class="token punctuation">.</span>answered <span class="token operator">?</span> <span class="token punctuation">(</span>
        prompt<span class="token punctuation">.</span>answers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>answer<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">— </span><span class="token punctuation">{</span>answer<span class="token punctuation">.</span>author<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Submit</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre></div>
<p>For now, we’ll skip styling and forms because we want to focus on 
architecture. I start every implementation with hardcoded data because 
it allows me to focus on business logic immediately instead of working 
on networking.</p>
<p>But once I have an idea of how I want to use the data, it’s time to integrate it into the app’s flow.</p>
<h2 id="designing-the-interface-first" style="position:relative;"><a href="#designing-the-interface-first" aria-label="designing the interface first permalink" class="anchor before"><svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Designing the Interface First</h2>
<p>I had a period in my career where I actively worked with NoSQL databases like DynamoDB.</p>
<p>We’ll get into the nitty gritty details of databases later in the book but there was one epiphany I had during that time.</p>
<p>Working with this kind of store made us think very carefully about 
the access patterns we were going to have in the application because 
retrieving data from them was only efficient if we could take advantage 
of their indexes.</p>
<p>So every product was designed based on its access patterns. Sometimes
 this was the UI, other times it was an API endpoint, but the 
user-centric focus during the development resulted in an 
easier-to-understand system, built around the domain specifics. As a 
side-effect, everything was built in order to support the exact use 
cases we had.</p>
<p>So I took this practice to heart and started applying it for all 
products I built from scratch, regardless of the underlying databases 
they had to use - I designed the user-facing part first.</p>
<h2 id="build-for-the-domain" style="position:relative;"><a href="#build-for-the-domain" aria-label="build for the domain permalink" class="anchor before"><svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Build for the Domain</h2>
<p>Every product needs to be built for its domain, not based on generic 
principles. Technical architectures don’t exist out of context. To 
decide how we’re going to access our data, we need to follow our access 
patterns.</p>
<p>If we were implementing this feature with a focus on technical 
conventions rather than business logic, we’d end up with the following 
REST API</p>
<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">/prompts
/prompts/:id
/prompts/:id/answers</code></pre></div>
<p>We’d need a way to retrieve the current prompt ID in the UI, by sending a request to <code class="language-text">/prompts?active=true</code>,
 for example. Then we’d fetch all the data about the prompt from its 
specific URL, then if the user has answered it, we’d get the answers 
from the last endpoint.</p>
<p>This follows RESTful conventions and considered in isolation is a 
technically sound implementation. The REST API has a clear boundary 
between entities and how they’re retrieved. But when you take the 
product as a whole, this purism will result in a worse overall 
experience for the user and a lot of complexity that doesn’t need to be 
there.</p>
<p>Users will have to wait on at least two subsequent requests to get 
the complete content of the page, even though it could’ve been retrieved
 with one.</p>
<p>If you don’t start from the user-facing part of the product it will 
have to compensate for its inability to fetch data competently. That’s 
how you end up with a GraphQL layer solving your overfetching problems, 
and a tonne of avoidable complexity on the side.</p>
<p>We want to send a request to <code class="language-text">/prompt</code>
 with an identifier for the user and let the back-end take care of 
retrieving the user, checking if they have answered, and returning the 
appropriate data.</p>
<h2 id="purism-leaks-logic" style="position:relative;"><a href="#purism-leaks-logic" aria-label="purism leaks logic permalink" class="anchor before"><svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Purism Leaks Logic</h2>
<p>However, there’s an additional factor here - the front-end becomes 
the driver of the business logic. By keeping the API pure and generic we
 only decide that the decision-making will have to be done elsewhere.</p>
<p>With this flawed design, the responsibility will fall entirely on the
 client - it will have to decide when and what to fetch and it will be 
aware of all the functionality of the RESTful API.</p>
<p>The back-end should decide what to return, and the front-end should 
decide what to render with the data it has. This is the single 
responsibility principle in its purest form.</p>
<p>This is the kind of thought process you’d need to go through when 
you’re communicating requirements with your colleagues working on the 
back-end or even when you’re the solo developer on a project. Think in 
advance with the information you have or you’ll be piling tech debt from
 the start.</p>
<h2 id="adding-a-data-source" style="position:relative;"><a href="#adding-a-data-source" aria-label="adding a data source permalink" class="anchor before"><svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Adding a Data Source</h2>
<p>Now that we know how we want to fetch the data, we can replace the 
hardcoded data with an HTTP call and add a default placeholder so we 
don’t have to think about empty states for now.</p>
<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">const</span> emptyPrompt <span class="token operator">=</span> <span class="token punctuation">{</span>
  title<span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
  answers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  answered<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>prompt<span class="token punctuation">,</span> setPrompt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>emptyPrompt<span class="token punctuation">)</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/api/v1/prompts'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setPrompt</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token comment">// ...</span>
<span class="token punctuation">}</span></code></pre></div>
<p>And with that, we have everything in place for a working component.</p>
<p>If you’re just validating an idea, prototyping a new interface, or 
exploring a new technology this is a fine place to stop. If you’re 
working in a startup hard-pressed for time, crunching before a demo to 
secure your next round, that’s as good as you need it. We can slap an 
integration test on top of it and call it a day.</p>
<p>But in all other cases, a working component is just the first step in
 building a feature. We have our first draft, now we need to edit it.</p>
<h2 id="tidying-up" style="position:relative;"><a href="#tidying-up" aria-label="tidying up permalink" class="anchor before"><svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Tidying up</h2>
<p>I don’t like the term refactoring because it’s become pretty loaded 
in modern software development. It’s synonymous with stopping product 
work for a week (at best) so you can ponder your implementation’s 
design, moving logic up and down, extracting functions, and establishing
 modules.</p>
<p>But that’s a hard idea to sell.</p>
<p>Software design shouldn’t be something we think about six months into
 the project when people start complaining and we run out of excuses to 
ignore it. Later in the book, we’ll talk about what to do if we inherit 
an application where design is an afterthought, but if you edit and 
design as you go, you’ll never reach that point of no return.</p>
<p>This is our component so far.</p>
<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>prompt<span class="token punctuation">,</span> setPrompt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>emptyPrompt<span class="token punctuation">)</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/api/v1/prompts'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setPrompt</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Home</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">About</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/contact<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Contact</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>prompt<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token punctuation">{</span>prompt<span class="token punctuation">.</span>answered <span class="token operator">?</span> <span class="token punctuation">(</span>
          prompt<span class="token punctuation">.</span>answers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>answer<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">— </span><span class="token punctuation">{</span>answer<span class="token punctuation">.</span>author<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
          <span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Submit</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
        <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre></div>
<p>The first thing we notice is that it has too many responsibilities - 
it knows the whole structure of the page, the navigation, and the 
contents. It makes the decision about what to render, manages the state,
 and does the data fetching.</p>
<p>Every time we need to make a change to this component, we’d have to 
get familiar with all its responsibilities, and built like this, they 
will only increase with time.</p>
<h2 id="layout" style="position:relative;"><a href="#layout" aria-label="layout permalink" class="anchor before"><svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Layout</h2>
<p>When we start adding more pages to this application, we will quickly 
notice that the structure will be duplicated for each one. Pages will 
also need meta tags, a title, context providers, and other 
configuration.</p>
<p>Normally, I never rush to extract reusable components. But in this 
case, we know that we will need some way of avoiding all this 
repetitiveness so it’s best to make a layout component as soon as 
possible.</p>
<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Layout</span><span class="token punctuation">(</span><span class="token punctuation">{</span> children <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Home</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/about<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">About</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
              </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Link</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/contact<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Contact</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Link</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre></div>
<p>This is better, but if we need to add some logic to the navigation, 
checking if the user is authenticated, for example, we’d need to 
implement that in the layout. Again, this means that our layout has more
 responsibilities than providing the skeleton for the page.</p>
<p>So we need to extract another component.</p>
<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">Layout</span><span class="token punctuation">(</span><span class="token punctuation">{</span> children <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Navigation</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre></div>
<p>That’s better. Maybe you’re wondering why the <code class="language-text">&lt;header&gt;</code>
 element is not added in the navigation itself. That’s because deciding 
where to render the navigation is the responsibility of the layout. In a
 different layout, the navigation may be on the side instead.</p>
<p>The application doesn’t need to have a single layout component 
covering all its pages. You can have as many as your design demands.</p>
<p>An e-commerce application with a sidebar used for filters and a main part can have a <code class="language-text">MainWithAsideLayout</code>. Then it could have a <code class="language-text">OneColumnLayout</code> for its much simpler checkout flow. And it could have an admin panel where the navigation is on the side.</p>
<p>For now, we only need one. No need to guess that far into the future.</p>
<h2 id="the-page" style="position:relative;"><a href="#the-page" aria-label="the page permalink" class="anchor before"><svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>The Page</h2>
<p>After extracting the layout and giving our component a better name, our page looks like so.</p>
<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">PromptPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Layout</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>prompt<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>prompt<span class="token punctuation">.</span>answered <span class="token operator">?</span> <span class="token punctuation">(</span>
        prompt<span class="token punctuation">.</span>answers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>answer<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">— </span><span class="token punctuation">{</span>answer<span class="token punctuation">.</span>author<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Submit</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Layout</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre></div>
<p>Components are just functions, and as such, they follow the same 
design principles we use to structure functions. In a regular function, 
if you have lengthy conditional statements you would extract them to 
reduce the cognitive load.</p>
<p>In the same way, every time I see a conditional in JSX, I consider if
 I can remove or simplify it to reduce the noise in the component.</p>
<p>Here we have a very simple check so we don’t need to think about abstracting it.</p>
<p>Instead, we should move the markup to two separate components because
 they will both grow in size. Every answer will need to be styled, and 
keeping that logic inside a component that has nothing to do with it 
doesn’t make sense. The form, on the other hand, will need to be 
handled, validated, and styled too - keeping all that state and 
additional logic adds more unneeded responsibilities to the page 
component.</p>
<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">PromptPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>prompt<span class="token punctuation">,</span> setPrompt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>emptyPrompt<span class="token punctuation">)</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/api/v1/prompts'</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setPrompt</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Layout</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>prompt<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>prompt<span class="token punctuation">.</span>answered <span class="token operator">?</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AnswersList</span></span> <span class="token attr-name">answers</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>prompt<span class="token punctuation">.</span>answers<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
      <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AnswerForm</span></span> <span class="token punctuation">/&gt;</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Layout</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre></div>
<p>I find this to be readable enough to continue forward.</p>
<h2 id="fetching-data" style="position:relative;"><a href="#fetching-data" aria-label="fetching data permalink" class="anchor before"><svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Fetching Data</h2>
<p>I’ve noticed that most of the architectural effort in the front-end 
is focused on creating abstractions around the HTTP layer. Developers 
understand boundaries and responsibilities intuitively and know that 
this logic has no place with the visualization logic.</p>
<p>This is what we’ll do next.</p>
<p>The component shouldn’t be aware if we’re using <code class="language-text">fetch</code>, <code class="language-text">axios</code>,
 or another HTTP client to retrieve data. It shouldn’t be aware if that 
data is fetched via HTTP, gRPC if it comes from a web socket or any 
other kind of source. It should only be responsible for rendering that 
data. And the developer making changes to this component doesn’t need to
 read through all of our HTTP logic to work on the markup.</p>
<p>So we’ll move the data fetching out in a separate file, and export it as an object with methods on it.</p>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// prompt-client.ts</span>

<span class="token keyword">const</span> <span class="token function-variable function">getActivePrompt</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'http://localhost:3000/api/v1/prompts'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  getActivePrompt<span class="token punctuation">,</span>
<span class="token punctuation">}</span></code></pre></div>
<p>And if our server is not ready to provide us with the data yet, we 
can hardcode it here instead of the component so it doesn’t ruin the 
natural flow of work. To the rest of the application, the data will be 
returned by the client - it won’t impact their design. Then the change 
would only have to be done here.</p>
<p>Once we’ve done that, we’ll call that function from our <code class="language-text">useEffect</code></p>
<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">PromptPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>prompt<span class="token punctuation">,</span> setPrompt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>emptyPrompt<span class="token punctuation">)</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    promptClient<span class="token punctuation">.</span><span class="token function">getActivePrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setPrompt</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Layout</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>prompt<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>prompt<span class="token punctuation">.</span>answered <span class="token operator">?</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AnswersList</span></span> <span class="token attr-name">answers</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>prompt<span class="token punctuation">.</span>answers<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
      <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AnswerForm</span></span> <span class="token punctuation">/&gt;</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Layout</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre></div>
<p>We hide the transport layer, removing the request details, and the client from the body of the component.</p>
<p>Data fetching implicitly adds more complexity, though. We don’t know 
how long it will take to retrieve the data, and if it would even be 
returned successfully. In our current state, if the server fails for 
some reason, we have no way to communicate this to the user besides a 
blank page.</p>
<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">PromptPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>prompt<span class="token punctuation">,</span> setPrompt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>emptyPrompt<span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>isLoading<span class="token punctuation">,</span> setIsLoading<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>isError<span class="token punctuation">,</span> setIsError<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setIsLoading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>

    promptClient
      <span class="token punctuation">.</span><span class="token function">getActivePrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setPrompt</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setIsError</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setIsLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token comment">// ...</span>
<span class="token punctuation">}</span></code></pre></div>
<p>If we take a brief glimpse into the future, we will uncover even more
 communication-related logic we need to take care of. When the user 
submits the <code class="language-text">AnswerForm</code> they will need
 to see the answers, but since they’re not present in our initial 
request, we will have to refetch it. We’ll also need to communicate 
loading and error states so the UI doesn’t look frozen while the 
submitted form is still en route.</p>
<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">PromptPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>prompt<span class="token punctuation">,</span> setPrompt<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>emptyPrompt<span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>isLoading<span class="token punctuation">,</span> setIsLoading<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>isError<span class="token punctuation">,</span> setIsError<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> <span class="token function-variable function">getPrompt</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">setIsLoading</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>

    promptClient
      <span class="token punctuation">.</span><span class="token function">getActivePrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setPrompt</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setIsError</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">finally</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setIsLoading</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">getPrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token comment">//  ...</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AnswerForm</span></span>
      <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        promptClient<span class="token punctuation">.</span><span class="token function">createAnswer</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">getPrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">}</span></span>
    <span class="token punctuation">/&gt;</span></span>
    <span class="token comment">//  ...</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre></div>
<p>Modern interfaces are dynamic, requiring constant communication with 
one or many APIs based on user actions. To this day, this is one of the 
biggest sources of complexity, and if you take a look at any application
 from the dawn of modern front-end development, you will see lines upon 
lines of code all dealing with request states.</p>
<p>It’s surprising how much of a UI’s state management logic is related to data fetching.</p>
<p>Nowadays there are useful data fetching abstractions that greatly 
simplify this logic, hiding many of the details from our application, 
and giving us a handy API to work with. I rarely advocate for the early 
usage of libraries in any project, but having something to make the 
bridge between the transport layer and the component lifecycle is a 
blessing - it removes a lot of verbosity from the codebase.</p>
<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">PromptPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> queryClient <span class="token operator">=</span> <span class="token function">useQueryClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// Fetching prompt data</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span>
    data<span class="token operator">:</span> prompt<span class="token punctuation">,</span>
    isLoading<span class="token punctuation">,</span>
    isError<span class="token punctuation">,</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    queryKey<span class="token operator">:</span> <span class="token string">'prompt'</span><span class="token punctuation">,</span>
    queryFn<span class="token operator">:</span> promptClient<span class="token punctuation">.</span>getActivePrompt<span class="token punctuation">,</span>
    initialData<span class="token operator">:</span> emptyPrompt<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// Handling answer submission</span>
  <span class="token keyword">const</span> mutation <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    mutationFn<span class="token operator">:</span> promptClient<span class="token punctuation">.</span>createAnswer<span class="token punctuation">,</span>
    <span class="token function-variable function">onSuccess</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// Invalidate and refetch</span>
      queryClient<span class="token punctuation">.</span><span class="token function">invalidateQueries</span><span class="token punctuation">(</span><span class="token string">'prompt'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span>answer<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    mutation<span class="token punctuation">.</span><span class="token function">mutate</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token comment">//  ...</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AnswerForm</span></span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleSubmit<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
    <span class="token comment">//  ...</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre></div>
<p>The details of the library’s API are not our focus since they are 
subject to change. What’s important is that our component keeps no state
 on its own, and we have removed the effect. We’ve traded the imperative
 API for a more descriptive one.</p>
<p>But one design problem that still remains is that anyone who has to 
work on that component has to understand the data fetching logic. The 
component is still aware of where the prompt is, when it’s refetched, 
and how answers are stored. In its ideal state, a component should just 
receive data and return markup - it should act as a pure function. The 
visualization code is our interface to the browser. When, how, and what 
data we need is part of our domain logic.</p>
<p>They have no place being together, so we need to figure out a way to move one of them away from the other.</p>
<p>In the context of React, custom hooks are a useful mechanism to 
approach this. They are an idiomatic feature of the library so they look
 natural in the code, yet they give us the necessary abstraction.</p>
<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">PromptPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> prompt<span class="token punctuation">,</span> handleSubmit <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">usePrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Layout</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>prompt<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>prompt<span class="token punctuation">.</span>answered <span class="token operator">?</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AnswersList</span></span> <span class="token attr-name">answers</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>prompt<span class="token punctuation">.</span>answers<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
      <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AnswerForm</span></span> <span class="token attr-name">handleSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleSubmit<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Layout</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre></div>
<p>Even though I don’t like the term “clean” because of its subjectivity
 - I’d call this a clean component. It has a single responsibility - 
render content on the screen based on the data it receives. Pay 
attention to how many details our custom hook is hiding from the 
component. It’s not aware if it’s coming from an HTTP call if it’s 
hardcoded, or read from a file.</p>
<p>On the other side, our business logic sits tidy in one place, no longer riddled throughout the component.</p>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">usePrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> queryClient <span class="token operator">=</span> <span class="token function">useQueryClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// Fetching prompt data</span>
  <span class="token keyword">const</span> prompt <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    queryKey<span class="token operator">:</span> <span class="token string">'prompt'</span><span class="token punctuation">,</span>
    queryFn<span class="token operator">:</span> promptClient<span class="token punctuation">.</span>getActivePrompt<span class="token punctuation">,</span>
    initialData<span class="token operator">:</span> emptyPrompt<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token comment">// Handling answer submission</span>
  <span class="token keyword">const</span> mutation <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    mutationFn<span class="token operator">:</span> promptClient<span class="token punctuation">.</span>createAnswer<span class="token punctuation">,</span>
    <span class="token function-variable function">onSuccess</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token comment">// Invalidate and refetch</span>
      queryClient<span class="token punctuation">.</span><span class="token function">invalidateQueries</span><span class="token punctuation">(</span><span class="token string">'prompt'</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  <span class="token keyword">const</span> <span class="token function-variable function">handleSubmit</span> <span class="token operator">=</span> <span class="token punctuation">(</span>answer<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    mutation<span class="token punctuation">.</span><span class="token function">mutate</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    prompt<span class="token punctuation">,</span>
    handleSubmit<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre></div>
<p>This shows how much of the logic inside a component is actually used 
in the markup, and how much of it can be considered an implementation 
detail. Our component was aware of all this even though it needed only a
 fraction of it.</p>
<h2 id="shallow-and-deep-modules" style="position:relative;"><a href="#shallow-and-deep-modules" aria-label="shallow and deep modules permalink" class="anchor before"><svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Shallow and Deep Modules</h2>
<p>The <code class="language-text">usePrompt</code> hook is a great 
example of a deep module. Imagine it like an iceberg - it has a small 
visible surface, the returned object, and a large chunk of code that 
remains hidden. Deep modules allow us to control a lot of functionality 
through a small API which makes the abstraction useful.</p>
<p>A shallow module, on the other hand, exposes too many of its 
internals with a large surface area and it hides few details. It matters
 little if we use a shallow module or not since inlining the 
functionality would be similar in complexity. When you notice that you 
have a shallow abstraction somewhere, consider inlining its 
functionality to simplify your code.</p>
<p>A good question is why the submission handler has to be abstracted 
away too. After all, it’s related to the vizualization logic, shouldn’t 
it be inside the component?</p>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">const</span> <span class="token punctuation">{</span> prompt<span class="token punctuation">,</span> handleSubmit <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">usePrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>
<p>What is actually part of the UI is the event that something has 
happened - a button got clicked, a form submitted, an element hovered 
over. That’s what the component needs to handle. What happens as a 
result of that event is a matter of business logic. Because of that we 
only let a reference to the function that has to be called inside the 
component, the rest is logic that’s not tied to the browser.</p>
<h2 id="an-http-layer-detail" style="position:relative;"><a href="#an-http-layer-detail" aria-label="an http layer detail permalink" class="anchor before"><svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>An HTTP Layer Detail</h2>
<p>While this is not front-end specific, I want to highlight the structure of our HTTP layer in the face of the <code class="language-text">promptsClient</code>.
 There is no clear-cut way about implementing a client so we’re free to 
do it with an object, a class, or a set of functions exported together 
in a single file.</p>
<p>Usually, I go with the latter.</p>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// prompts-client.ts</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getActivePrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'https://example.com/api/v1/prompts'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createAnswer</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'https://example.com/api/v1/prompts'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> answer <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre></div>
<p>There is little value in using a more complex structure since there’s
 neither data nor behavior that we need to hide or reuse. A class would 
only add additional complexity to what’s otherwise a very simple 
implementation. The file gives enough cohesion as it is, and not using 
an object or a class means we can keep our indentation level to a 
minimum.</p>
<p>Another detail worth noting here is that most HTTP clients allow you 
to create a pre-configured instance for easier use when you need to hit 
multiple routes on the same API. The specific syntax is irrelevant, but 
it would look something like this:</p>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// prompts-client.ts</span>

<span class="token keyword">const</span> api <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token string">'https://example.com/api/v1'</span><span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getActivePrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> api<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/prompts'</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createAnswer</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> api<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/prompts'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> answer <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre></div>
<p>This makes the bodies of the different functions a bit smaller, 
saving you space on the screen, and protecting you from gnarly 
copy-pasting errors that can send you on a two-hour-long bug chase 
before you find you have forgotten to add <code class="language-text">/v1</code> to the URL.</p>
<p>We will deal with user tokens and authentication in one of the next chapters and revisit this file.</p>
<h2 id="hardcoded-values" style="position:relative;"><a href="#hardcoded-values" aria-label="hardcoded values permalink" class="anchor before"><svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Hardcoded Values</h2>
<p>Any time we’re hardcoding a string in our code we should consider 
whether extracting it to a variable would make our code easier to read 
and maintain. A descriptive variable would give more meaning to the 
implementation than domain-specific text, for once. But more 
importantly, hardcoded strings are usually used for checks or they need 
to match something outside the boundaries of our application.</p>
<p>In the context of our HTTP layer, these string values represent the 
base URL and endpoints of an API, and keeping them inside the client 
represents an opportunity for errors (with forgotten leading slashes, 
for example). My approach is to extract these values in a separate 
object in a file that lives close to where the values are used.</p>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// prompts-client.ts</span>

<span class="token keyword">const</span> api <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">createInstance</span><span class="token punctuation">(</span>endpoints<span class="token punctuation">.</span>baseURL<span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getActivePrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> api<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>endpoints<span class="token punctuation">.</span>activePrompt<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createAnswer</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> api<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>endpoints<span class="token punctuation">.</span>createAnswer<span class="token punctuation">,</span> <span class="token punctuation">{</span> answer <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// endpoints.ts</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  baseURL<span class="token operator">:</span> <span class="token string">'https://example.com/api/v1'</span><span class="token punctuation">,</span>
  activePrompt<span class="token operator">:</span> <span class="token string">'/prompts'</span><span class="token punctuation">,</span>
  createAnswer<span class="token operator">:</span> <span class="token string">'/prompts'</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span></code></pre></div>
<p>This looks a lot better.</p>
<p>The fact that we have repetitive values inside this object shouldn’t 
bother us since they are all kept together and the property name gives 
them a different meaning. What’s important is that we give meaning to 
them through the object they’re now a part of.</p>
<p>But if we look around at our code, we’ll notice that we have other hardcoded values in the data fetching hooks we use.</p>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// usePrompt.ts</span>

<span class="token keyword">const</span> prompt <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  queryKey<span class="token operator">:</span> <span class="token string">'prompt'</span><span class="token punctuation">,</span>
  queryFn<span class="token operator">:</span> promptClient<span class="token punctuation">.</span>getActivePrompt<span class="token punctuation">,</span>
  initialData<span class="token operator">:</span> emptyPrompt<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> mutation <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  mutationFn<span class="token operator">:</span> promptClient<span class="token punctuation">.</span>createAnswer<span class="token punctuation">,</span>
  <span class="token function-variable function">onSuccess</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    queryClient<span class="token punctuation">.</span><span class="token function">invalidateQueries</span><span class="token punctuation">(</span><span class="token string">'prompt'</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></div>
<p>Every query has a unique key associated with it. It’s used to 
identify the value in an in-memory cache and invalidate it when we want 
it refetched. It’s easier to keep track of the hardcoded values when 
they’re next to each other in the same file, but we might have queries 
in different files that need the same data.</p>
<p>Then, depending on hardcoded strings would expose us to the problems we mentioned above.</p>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// usePrompt.ts</span>

<span class="token keyword">const</span> prompt <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  queryKey<span class="token operator">:</span> queryKeys<span class="token punctuation">.</span>prompt<span class="token punctuation">,</span>
  queryFn<span class="token operator">:</span> promptClient<span class="token punctuation">.</span>getActivePrompt<span class="token punctuation">,</span>
  initialData<span class="token operator">:</span> emptyPrompt<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> mutation <span class="token operator">=</span> <span class="token function">useMutation</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  mutationFn<span class="token operator">:</span> promptClient<span class="token punctuation">.</span>createAnswer<span class="token punctuation">,</span>
  <span class="token function-variable function">onSuccess</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    queryClient<span class="token punctuation">.</span><span class="token function">invalidateQueries</span><span class="token punctuation">(</span>queryKeys<span class="token punctuation">.</span>prompt<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// query-keys.ts</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  prompt<span class="token operator">:</span> <span class="token string">'prompt'</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span></code></pre></div>
<p>With this, I think we’ve done a good job cleaning up our components.</p>
<h2 id="follow-evegreen-patterns" style="position:relative;"><a href="#follow-evegreen-patterns" aria-label="follow evegreen patterns permalink" class="anchor before"><svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Follow Evegreen Patterns</h2>
<p>So far we’ve leveraged some evegreen programming advice in the context of a React application.</p>
<p>We’ve implemented layers, similar to how this is done in hexagonal 
architecture. We’ve split our single large component into smaller ones, 
similarly to how this is done with regular functions. And we’ve focused 
on making sure everything has a single responsibility, following the 
principle with the same name.</p>
<p>Most importantly, we did that without following complex design 
patterns to the letter. We took inspiration from the ageless principles 
that have proven to work in the industry and found a way to implement 
them in the context of our product.</p>
<p>All this is meant to illustrate that the technology we work with only
 adds a flavor on top of the same problems we’ve been dealing with for a
 long time as an industry. Also, front-end development is not a field 
where complexity has to be managed in a unique way. We already have the 
knowledge, we just have to find the best way to implement it.</p>
<h2 id="software-design-must-be-pragmatic" style="position:relative;"><a href="#software-design-must-be-pragmatic" aria-label="software design must be pragmatic permalink" class="anchor before"><svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Software Design Must be Pragmatic</h2>
<p>When we think about software design we focus on making things look 
better. We marvel at a freshly refactored implementation, enjoying how 
readable and clean everything is now that we’ve tidied it up. But it’s 
important to understand that we don’t go through all this effort just to
 please our desire to Marie Kondo a codebase.</p>
<p>A good structure has pragmatic benefits.</p>
<p>We add layers because different kinds of logic change at a different 
pace, and they shouldn’t impact one another. The reader doesn’t have to 
know how the whole application works to make a change that only impacts 
one of its layers.</p>
<p>Our HTTP layer will be the least changed part of the application. 
Once all your handlers are in place, you’d be working predominantly on 
visualizing and working with the data they retrieve. And changes in the 
JSX will be a lot more common than changes in the domain logic that 
underpins them.</p>
<p>The code looks good as a side effect of us making sure it’s maintainable.</p>
<h2 id="dealing-with-change" style="position:relative;"><a href="#dealing-with-change" aria-label="dealing with change permalink" class="anchor before"><svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Dealing with Change</h2>
<p>Every implementation can be structured well if it’s set in stone and 
never changes. Let’s see how we can approach follow-up requirements with
 this design. Imagine that we now need to add a timestamp to each 
answer, showing what time ago it was added.</p>
<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> dayjs <span class="token keyword">from</span> <span class="token string">'dayjs'</span>
<span class="token keyword">import</span> relativeTime <span class="token keyword">from</span> <span class="token string">'dayjs/plugin/relativeTime'</span>

dayjs<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>relativeTime<span class="token punctuation">)</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">AnswersList</span><span class="token punctuation">(</span><span class="token punctuation">{</span> answers <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>answers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>answer<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">— </span><span class="token punctuation">{</span>answer<span class="token punctuation">.</span>author<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token function">dayjs</span><span class="token punctuation">(</span>answer<span class="token punctuation">.</span>createdAt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromNow</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre></div>
<p>With this, we have the relative time displayed on the screen. But 
remember that the first draft is just proof that what we want to create 
is possible.</p>
<p>We’ve found a useful lightweight library to work with dates, we’ve 
found the proper plugins and methods, and we’ve inserted it in the right
 place. We can play around with the styles too, to make sure that we 
don’t mess up our layout.</p>
<p>But we can’t ship our first draft.</p>
<p>This implementation ruins our layers, putting domain logic in 
representational logic. The component should only specify what and where
 to render, it shouldn’t be responsible for structuring data, let alone 
be aware of the libraries we use.</p>
<p>We want our component to look like this.</p>
<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">AnswersList</span><span class="token punctuation">(</span><span class="token punctuation">{</span> answers <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>answers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>answer<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">— </span><span class="token punctuation">{</span>answer<span class="token punctuation">.</span>author<span class="token punctuation">.</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>answer<span class="token punctuation">.</span>createdAt<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre></div>
<p>Where would be the best place to abstract this logic? One option would be to do it in the <code class="language-text">promptsClient</code>
 after we fetch the data, but it’s not really the responsibility of the 
transport layer to structure data. This is a business requirement and as
 such it should be handled where we handle the rest of our 
domain-specific logic - in the custom hook.</p>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">usePrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    prompt<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>prompt<span class="token punctuation">,</span>
      answers<span class="token operator">:</span> prompt<span class="token punctuation">.</span>answers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>answer<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token operator">...</span>answer<span class="token punctuation">,</span>
        createdAt<span class="token operator">:</span> <span class="token function">dayjs</span><span class="token punctuation">(</span>answer<span class="token punctuation">.</span>createdAt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fromNow</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    handleSubmit<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre></div>
<p>That’s one way to go about it, and we can add <code class="language-text">React.useMemo</code> if we need it. But these kinds of data manipulations using the spread <code class="language-text">...</code> operator can become quite messy and make the rest of the code hard to read.</p>
<p>We could move the formatting out to a separate function, keeping the <code class="language-text">return</code> statement simpler.</p>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">usePrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>

  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    prompt<span class="token operator">:</span> <span class="token function">formatPrompt</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">,</span>
    handleSubmit<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre></div>
<p>We pass in the whole object otherwise we’d still have to construct an object here.</p>
<p>And while this is enough of an abstraction and it keeps both our 
component and hook simple, we could make one better and see if the 
libraries we use offer an API that would improve our design here.</p>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// usePrompt.ts</span>
<span class="token keyword">const</span> prompt <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  queryKey<span class="token operator">:</span> queryKeys<span class="token punctuation">.</span>prompt<span class="token punctuation">,</span>
  queryFn<span class="token operator">:</span> promptClient<span class="token punctuation">.</span>getActivePrompt<span class="token punctuation">,</span>
  initialData<span class="token operator">:</span> emptyPrompt<span class="token punctuation">,</span>
  <span class="token function-variable function">select</span><span class="token operator">:</span> <span class="token punctuation">(</span>prompt<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">formatPrompt</span><span class="token punctuation">(</span>prompt<span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></div>
<p>Or even simpler.</p>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// usePrompt.ts</span>
<span class="token keyword">const</span> prompt <span class="token operator">=</span> <span class="token function">useQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  queryKey<span class="token operator">:</span> queryKeys<span class="token punctuation">.</span>prompt<span class="token punctuation">,</span>
  queryFn<span class="token operator">:</span> promptClient<span class="token punctuation">.</span>getActivePrompt<span class="token punctuation">,</span>
  initialData<span class="token operator">:</span> emptyPrompt<span class="token punctuation">,</span>
  select<span class="token operator">:</span> formatPrompt<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// ...</span>

<span class="token keyword">return</span> <span class="token punctuation">{</span>
  prompt<span class="token punctuation">,</span>
  handleSubmit<span class="token punctuation">,</span>
<span class="token punctuation">}</span></code></pre></div>
<p>The whole change takes no more than a line inside the custom hook, and a simple formatting function.</p>
<h2 id="even-more-changes" style="position:relative;"><a href="#even-more-changes" aria-label="even more changes permalink" class="anchor before"><svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Even More Changes</h2>
<p>Most often, our code ends up in a bad state because of our inability 
to incorporate all the changes it’s subject to in a sensible way. These 
changes are a result of shifting business requirements or lack of 
clarity when a new feature is being implemented. We discussed that this 
problem can be somewhat alleviated by continuously asking questions.</p>
<p>But another source of changes is us, the engineers, overlooking 
something that could cause a problem in the future, forcing us to deal 
with the fallout.</p>
<p>Our application has one such flaw.</p>
<p>We rely on the back-end returning a response with a certain 
structure, but let’s imagine that there was a problem with our REST API 
and it sent us a faulty object. We have no error handling, and that 
would naturally result in a broken UI. Now, handling an exception is not
 the hardest technical challenge, but deciding where to do it is a 
design decision we need to make consciously.</p>
<p>We could add checks in the components displaying the data:</p>
<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">AnswersList</span><span class="token punctuation">(</span><span class="token punctuation">{</span> answers <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>answers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre></div>
<p>But the more complex our application grows the more of these checks 
we’d have to add to our components. Each one of them would have to deal 
with validating its data potentially repeating a lot of validation 
logic. We want to move these checks up to a higher level.</p>
<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">PromptPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> prompt<span class="token punctuation">,</span> handleSubmit <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">usePrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Layout</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>prompt<span class="token punctuation">.</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>prompt<span class="token punctuation">.</span>answered <span class="token operator">&amp;&amp;</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>prompt<span class="token punctuation">.</span>answers<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AnswersList</span></span> <span class="token attr-name">answers</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>prompt<span class="token punctuation">.</span>answers<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
      <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AnswerForm</span></span> <span class="token attr-name">handleSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleSubmit<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Layout</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre></div>
<p>Pulling it one level up would mean that the child components no 
longer need to worry about the validity of the data, but we do increase 
the complexity in the parent component, making us reach toward nested 
ternaries to express our logic.</p>
<p>But as we mentioned, a component with many conditionals inside of it is a symptom of bad design. Just like a regular function.</p>
<p>Let’s go back to the fundamental design principles.</p>
<p>You will always look for a way to split up a function with too many 
conditional statements. It makes the code too complex, hard to read, and
 the mix of responsibilities means that it will be hard to maintain as 
well.</p>
<p>We need to pull these checks even higher and handle them at their origin. In our case, this is the transport layer.</p>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getActivePrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>endpoints<span class="token punctuation">.</span>activePrompt<span class="token punctuation">)</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>answers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> data
<span class="token punctuation">}</span></code></pre></div>
<p>We can add a check for the specific value that failed, but we have no
 guarantee that we won’t have a problem with another value in the 
future. So it makes sense to check all of them and validate that all of 
them correspond to the types we use in our application. But for a large 
response object or a deeply nested one, this would be burdensome to do 
by hand. Handling edge cases properly would leave this implementation 
prone to errors too.</p>
<p>Instead, we should put a schema validation library to use.</p>
<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// schemas.ts</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> promptSchema <span class="token operator">=</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  title<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  answers<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    text<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    author<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      name<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    createdAt<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// prompts-client.ts</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getActivePrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> api<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>endpoints<span class="token punctuation">.</span>activePrompt<span class="token punctuation">)</span>
  <span class="token keyword">return</span> promptSchema<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre></div>
<p>We don’t have to write imperative logic, relying on a descriptive model of the data we expect.</p>
<p>Validating data at the trust boundaries is something we should do 
regardless if it’s at the front-end or back-end. Any time we’re 
accepting data from an external source we need to ensure that it matches
 our expectations or we’d be building on assumptions. In later chapters,
 we’ll do this when accepting requests in our API, reading messages from
 a message broker, or reading files.</p>
<p>Don’t settle for false security.</p>
<p>I’ve seen a lot of TypeScript projects written without validation in 
the transport layer, relying on casting the returned value to a type. 
But without any runtime checks for that value, you’re in the same spot 
in which we were a moment ago. If the API returns a faulty response, 
your application won’t be able to handle it regardless of your types.</p>
<h2 id="empty-states" style="position:relative;"><a href="#empty-states" aria-label="empty states permalink" class="anchor before"><svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Empty States</h2>
<p>While we’re on the topic of handling errors, there’s one detail that 
we’ve overlooked so far. The moment we introduce the network into our 
application, we implicitly add a mountain of unavoidable complexity. 
Right now we avoid that problem by having a default empty prompt state, 
but let’s imagine that our product team decides to display an 
inspirational writing quote while the content on the page is loading.</p>
<p>We will remove the initial data, and the value will be <code class="language-text">undefined</code> before the prompt is loaded.</p>
<p>While working with hardcoded data we can rely on it always being 
available - the object sits right there in memory. But networks add a 
level of uncertainty that we can’t ignore. We already handled the 
errors, but there are empty states to think about. What do we show on 
the screen while we’re waiting for the data to arrive?</p>
<p>There are various loading indicators like messages, spinners, 
skeleton loaders, and in our case a quote - that’s mostly a product 
decision. But empty states add more complexity to the codebase.</p>
<p>Where we had straightforward templating, now we need another check.</p>
<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">PromptPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>prompt <span class="token operator">?</span> <span class="token punctuation">(</span>
        prompt<span class="token punctuation">.</span>answered <span class="token operator">?</span> <span class="token punctuation">(</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AnswersList</span></span> <span class="token attr-name">answers</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>prompt<span class="token punctuation">.</span>answers<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AnswerForm</span></span> <span class="token punctuation">/&gt;</span></span>
        <span class="token punctuation">)</span>
      <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">RandomInspirationalQuote</span></span> <span class="token punctuation">/&gt;</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre></div>
<p>But when we find that we have nested conditionals inside a 
component’s markup (and that goes for any framework, not just React), it
 means the component is not split granularly enough. A nested 
conditional is an opportunity to extract a child component.</p>
<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">// PromptPage.tsx</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">PromptPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ...</span>

  <span class="token keyword">return</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
      </span><span class="token punctuation">{</span>prompt <span class="token operator">?</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">PromptContent</span></span> <span class="token attr-name">prompt</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>prompt<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
      <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">RandomInspirationalQuote</span></span> <span class="token punctuation">/&gt;</span></span>
      <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">
    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// PromptContent.tsx</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">PromptContent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> prompt <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> prompt<span class="token punctuation">.</span>answered <span class="token operator">?</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AnswersList</span></span> <span class="token attr-name">answers</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>prompt<span class="token punctuation">.</span>answers<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AnswerForm</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span></code></pre></div>
<p>But we don’t want to just sweep the complexity under the rug, we want to reduce it. A ternary is essentially a shorthand <code class="language-text">if-else</code> statement and one good design approach is to avoid writing <code class="language-text">else</code> statements at all.</p>
<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">// PromptContent.tsx</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">PromptContent</span><span class="token punctuation">(</span><span class="token punctuation">{</span> prompt <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prompt<span class="token punctuation">.</span>answered<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AnswerForm</span></span> <span class="token punctuation">/&gt;</span></span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AnswersList</span></span> <span class="token attr-name">answers</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>prompt<span class="token punctuation">.</span>answers<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token punctuation">}</span></code></pre></div>
<p>By inverting the condition and pulling it up, we check the faulty 
state and keep the golden path on the base level of indentation. This 
conditional statement “guards” the rest of the logic from errors and is 
known as a “guard clause”.</p>
<p>Guard clauses are one of the most useful tools we have to fight 
complexity at a granular level and they’ve become my favorite technique 
to simplify an implementation.</p>
<p>And with that, we’re finally ready. For now.</p>
<h2 id="summary" style="position:relative;"><a href="#summary" aria-label="summary permalink" class="anchor before"><svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Summary</h2>
<p>We covered some important concepts in great detail in this chapter. 
We know the importance of looking at a product holistically and 
architecting it based on the needs of its user-facing parts. We know how
 to start building, and where to mock data.</p>
<p>The most important takeaway is that the popular programming 
principles are just as applicable in the front-end as they are anywhere 
else in the stack. So when you’re writing code, regardless if it’s 
written in React or not, always think in terms of those principles - 
reduce complexity by splitting responsibilities, abstract domain logic, 
fight errors at their origin, don’t leak details from the API to the 
application.</p>
<p>Once you know a structure that works well with the technology you’re 
using, you can apply it as you go and have a well-structured 
application.</p></div><div class="newsletter-form"><div style="text-align:center"><img src="Clean%20Architecture%20in%20React%20_%20Alex%20Kondov%20-%20Software%20Engineer_files/the-thinker.png" style="width:auto;height:100px;margin-top:10px"></div><h3 style="margin-top:0">Get Better at Software Design &amp; Architecture</h3><p style="text-align:center">Stay up to date with my writing. No spam. Unsubscribe any time.</p><form action="https://alexkondov.us2.list-manage.com/subscribe/post?u=fca75767fa83fa3473478b4ca&amp;id=495bb9068f" method="post" name="mc-embedded-subscribe-form" target="_blank"><div class="newsletter-form-input"><input type="email" name="EMAIL" placeholder="Your Email Address"><input type="hidden" value="1" name="embed"><input type="submit" value="Subscribe"></div></form></div><a target="_blank" href="https://fullstacktao.com/"><div class="book"><img style="border-radius:3px;border:1px solid #ccc;padding:5px;background-color:#fff" src="Clean%20Architecture%20in%20React%20_%20Alex%20Kondov%20-%20Software%20Engineer_files/full-stack-tao-cover.jpg"><div><h2 style="margin-top:10px;font-weight:400">Full Stack Tao</h2><div class="divider"></div><p>Everything I've learned about building software in the last 10 years.</p></div></div></a></div></div><div id="gatsby-announcer" style="position:absolute;top:0;width:1px;height:1px;padding:0;overflow:hidden;clip:rect(0, 0, 0, 0);white-space:nowrap;border:0" aria-live="assertive" aria-atomic="true"></div></div><script>
  
  
  if(true) {
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');
  }
  if (typeof ga === "function") {
    ga('create', 'UA-132059795-1', 'auto', {});
      
      
      
      
      
      }</script><script id="gatsby-script-loader">/*<![CDATA[*/window.pagePath="/full-stack-tao-clean-architecture-react/";window.___webpackCompilationHash="76c6ffd0f9227ebab613";/*]]>*/</script><script id="gatsby-chunk-mapping">/*<![CDATA[*/window.___chunkMapping={"polyfill":["/polyfill-060eb318c2282947de03.js"],"app":["/app-6983b6981478551711c4.js"],"component---src-pages-404-js":["/component---src-pages-404-js-4c1c47c17123d166b49b.js"],"component---src-pages-articles-js":["/component---src-pages-articles-js-d0da1c1ba12251ba5ce6.js"],"component---src-pages-books-js":["/component---src-pages-books-js-8e20f1a3a5356ca57cb1.js"],"component---src-pages-consulting-js":["/component---src-pages-consulting-js-f8ce6a8c945965f518ab.js"],"component---src-pages-fiction-js":["/component---src-pages-fiction-js-9a3f9c1f1cfa5a89e4f3.js"],"component---src-pages-index-js":["/component---src-pages-index-js-8f331ec8d77735a264c1.js"],"component---src-templates-blog-post-js":["/component---src-templates-blog-post-js-e4495d77a5129a6937ec.js"]};/*]]>*/</script><script src="Clean%20Architecture%20in%20React%20_%20Alex%20Kondov%20-%20Software%20Engineer_files/polyfill-060eb318c2282947de03.js" nomodule=""></script><script src="Clean%20Architecture%20in%20React%20_%20Alex%20Kondov%20-%20Software%20Engineer_files/app-6983b6981478551711c4.js" async=""></script><script src="Clean%20Architecture%20in%20React%20_%20Alex%20Kondov%20-%20Software%20Engineer_files/framework-410de060c0d7e6a52e34.js" async=""></script><script src="Clean%20Architecture%20in%20React%20_%20Alex%20Kondov%20-%20Software%20Engineer_files/webpack-runtime-66fca1f0c00d36c72bca.js" async=""></script><iframe scrolling="no" frameborder="0" allowtransparency="true" src="Clean%20Architecture%20in%20React%20_%20Alex%20Kondov%20-%20Software%20Engineer_files/widget_iframe.htm" title="Twitter settings iframe" style="display: none;"></iframe><iframe id="rufous-sandbox" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen="true" style="position: absolute; visibility: hidden; display: none; width: 0px; height: 0px; padding: 0px; border: medium;" title="Twitter analytics iframe"></iframe></body></html>